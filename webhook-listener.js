const express = require('express'); const crypto = require('crypto'); const bodyParser = require('body-parser'); const app = express(); const PORT = process.env.PORT || 3000; // 👇 Replace with your GitHub webhook secret const WEBHOOK_SECRET = process.env.GITHUB_WEBHOOK_SECRET || 'your_shared_secret'; // ⚙️ Middleware to parse raw body (needed for signature verification) app.use(bodyParser.json({ verify: rawBodySaver })); function rawBodySaver(req, res, buf, encoding) { req.rawBody = buf; } // 🔐 Verify GitHub payload with HMAC function verifySignature(req) { const signature = req.headers['x-hub-signature-256']; if (!signature) return false; const hmac = crypto .createHmac('sha256', WEBHOOK_SECRET) .update(req.rawBody) .digest('hex'); const expected = `sha256=${hmac}`; return crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(expected)); } // 🎧 Main webhook route app.post('/webhook', (req, res) => { if (!verifySignature(req)) { console.warn('Signature mismatch – possible spoof'); return res.status(401).send('Invalid signature'); } const event = req.headers['x-github-event']; const payload = req.body; console.log(`[${new Date().toISOString()}] Event: ${event}`); console.log('Payload:', JSON.stringify(payload, null, 2)); // 🧠 Do something with payload: log to DB, trigger build, notify dashboard, etc. res.status(200).send('Webhook received'); }); // 🚀 Start listener app.listen(PORT, () => { console.log(`Webhook listener running on port ${PORT}`); }); 
