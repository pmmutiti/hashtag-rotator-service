
{ "crons": [ { "path": "/api/cron", "schedule": "0 10 * * *" } ], "rewrites": [ { "source": "/kenya-trends", "has": [ { "type": "header", "key": "x-vercel-ip-country", "value": "KE" } ], "destination": "/api/trends?region=kenya" }, { "source": "/kenya-trends", "destination": "/api/trends?region=global" }, { "source": "/trends/:region", "destination": "/api/trends?region=:region" } ] } 

// File: api/github-webhook.js import crypto from 'crypto'; const WEBHOOK_SECRET = process.env.GITHUB_WEBHOOK_SECRET || 'your_shared_secret'; export default async function handler(req, res) { if (req.method !== 'POST') { return res.status(405).send('Method Not Allowed'); } const signature = req.headers['x-hub-signature-256']; const rawBody = JSON.stringify(req.body); // Vercel parses body automatically const hmac = crypto .createHmac('sha256', WEBHOOK_SECRET) .update(rawBody) .digest('hex'); const expected = `sha256=${hmac}`; const verified = crypto.timingSafeEqual( Buffer.from(signature || ''), Buffer.from(expected) ); if (!verified) { console.warn('üîê Signature mismatch ‚Äì possible spoof'); return res.status(401).send('Invalid signature'); } const event = req.headers['x-github-event']; console.log(`[${new Date().toISOString()}] Event: ${event}`); console.log('Payload:', JSON.stringify(req.body, null, 2)); // TODO: Do something with the payload res.status(200).send('Webhook received üëå'); } 
